/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.5/userguide/java_library_plugin.html
 */

// Apply the java-library plugin to add support for Java Library
apply plugin: 'java-library'
apply plugin: 'eclipse'
// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
	// Jsoup
	compile 'org.jsoup:jsoup:1.10.2'
	
	// SLF4J
	compile 'org.slf4j:slf4j-api:1.7.25'
	compile 'org.slf4j:slf4j-simple:1.7.25'  

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:21.0'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
}

eclipse{
	 project {
	 	natures 'org.springsource.ide.eclipse.gradle.core.nature'
	 }
	classpath {
		// containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
		// containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
		downloadSources = true
		downloadJavadoc = true
		
		// Configuração que permite que o código fonte das bibliotecas sejam visualizados
		file {
			withXml { xml ->
				def node = xml.asNode()
				// node.remove( node.find { it.@path == 'org.eclipse.jst.j2ee.internal.web.container' } )
				// node.remove( node.find { it.@path == 'src/test/java' } )
				// node.remove( node.find { it.@path == 'src/test/resources' } )
				// node.appendNode( 'classpathentry', [ kind: 'src', path: 'src/test/java', output: 'binTest'])
				// node.appendNode( 'classpathentry', [ kind: 'src', path: 'src/test/resources', output: 'binTest'])
				// node.appendNode( 'classpathentry', [ kind: 'con', path: 'org.eclipse.jst.j2ee.internal.web.container', exported: 'true'])
			}
		}
	}
	jdt{
	File f = file('.settings/org.eclipse.core.resources.prefs')
	f.write('eclipse.preferences.version=1\n')
	f.append('encoding/<project>=utf-8')
	}
}

